import itertools
import string

def xor_decrypt(data, key):
    """D√©chiffre des donn√©es avec un XOR en utilisant une cl√© donn√©e."""
    key_length = len(key)
    return bytes(data[i] ^ ord(key[i % key_length]) for i in range(len(data)))

def is_readable(text):
    """V√©rifie si le texte semble lisible (caract√®res ASCII imprimables)."""
    return all(32 <= char < 127 or char in (10, 13) for char in text)

def generate_keys(start_key):
    """G√©n√®re toutes les cl√©s possibles √† partir d'une cl√© donn√©e jusqu'√† 'zzzzzz'."""
    alphabet = string.ascii_lowercase
    key_length = len(start_key)

    start_indices = [alphabet.index(c) for c in start_key]

    for indices in itertools.product(range(26), repeat=key_length):
        if indices >= tuple(start_indices):
            yield ''.join(alphabet[i] for i in indices)

def brute_force_xor(file_path, start_key, output_file="resultats.txt"):
    """Brute force XOR en stockant les r√©sultats au fur et √† mesure."""
    with open(file_path, "rb") as f:
        encrypted_data = f.read()

    print(f"üîç D√©marrage du brute force √† partir de : {start_key}")

    with open(output_file, "w", encoding="utf-8") as result_file:
        result_file.write("Cl√© test√©e | Premi√®re phrase d√©chiffr√©e\n")
        result_file.write("=" * 50 + "\n")

        for key in generate_keys(start_key):
            decrypted = xor_decrypt(encrypted_data, key)
            preview = decrypted[:15].decode(errors='ignore')  # 15 premiers caract√®res

            # Stocker la cl√© et l'aper√ßu dans le fichier
            result_file.write(f"{key} | {preview}\n")

            print(f"üîë Cl√© : {key} ‚Üí Aper√ßu : {preview}")

            if is_readable(decrypted):
                print(f"\n‚úÖ Cl√© trouv√©e : {key}\nüîì Texte d√©chiffr√© :\n{decrypted.decode(errors='ignore')}\n")
                return key

    print("‚ùå Aucune cl√© valide trouv√©e.")
    return None

# Utilisation
file_path = "./PE.txt"  # Remplacez par votre fichier chiffr√©
start_key = "daaaaa"  # Cl√© de d√©part
brute_force_xor(file_path, start_key)
